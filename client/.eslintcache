[{"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\index.js":"1","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\App.js":"2","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\reducers\\index.js":"3","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\reducers\\isPlayingReducer.js":"4","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\actions\\index.js":"5","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\actions\\types.js":"6","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\index.js":"7","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\index.js":"8","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\State.js":"9","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\View.js":"10","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\Controller.js":"11","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\config.js":"12","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\Snake.js":"13","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\Directions.js":"14","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\Colors.js":"15","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\utils.js":"16","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\Navigation.js":"17","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\GameConsole\\GameConsole.js":"18","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\GameConsole\\GameConsoleNav.js":"19","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\reducers\\authReducer.js":"20","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\GameConsole\\GameConsoleDisplay.js":"21","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\GameConsole\\GameConsoleLeaderBoard.js":"22","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\GameConsole\\Modes.js":"23","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\GameConsole\\GameConsolePlayer.js":"24","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\Profile.js":"25","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\Modal.js":"26","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\history.js":"27"},{"size":474,"mtime":1611731189205,"results":"28","hashOfConfig":"29"},{"size":908,"mtime":1612506796452,"results":"30","hashOfConfig":"29"},{"size":231,"mtime":1612423208239,"results":"31","hashOfConfig":"29"},{"size":260,"mtime":1612496321953,"results":"32","hashOfConfig":"29"},{"size":1095,"mtime":1612522240631,"results":"33","hashOfConfig":"29"},{"size":121,"mtime":1612426410001,"results":"34","hashOfConfig":"29"},{"size":51,"mtime":1612320311470,"results":"35","hashOfConfig":"29"},{"size":1134,"mtime":1612492176701,"results":"36","hashOfConfig":"29"},{"size":2038,"mtime":1612349656997,"results":"37","hashOfConfig":"29"},{"size":2413,"mtime":1612492257125,"results":"38","hashOfConfig":"29"},{"size":673,"mtime":1612320233829,"results":"39","hashOfConfig":"29"},{"size":205,"mtime":1612350056224,"results":"40","hashOfConfig":"29"},{"size":2037,"mtime":1612349774717,"results":"41","hashOfConfig":"29"},{"size":95,"mtime":1612320260522,"results":"42","hashOfConfig":"29"},{"size":149,"mtime":1612320216004,"results":"43","hashOfConfig":"29"},{"size":107,"mtime":1612320298866,"results":"44","hashOfConfig":"29"},{"size":806,"mtime":1612516797917,"results":"45","hashOfConfig":"29"},{"size":642,"mtime":1612495770869,"results":"46","hashOfConfig":"29"},{"size":814,"mtime":1612496106970,"results":"47","hashOfConfig":"29"},{"size":225,"mtime":1612521757239,"results":"48","hashOfConfig":"29"},{"size":641,"mtime":1612498201342,"results":"49","hashOfConfig":"29"},{"size":1511,"mtime":1612523543580,"results":"50","hashOfConfig":"29"},{"size":138,"mtime":1612496045936,"results":"51","hashOfConfig":"29"},{"size":793,"mtime":1612498273864,"results":"52","hashOfConfig":"29"},{"size":1148,"mtime":1612515363277,"results":"53","hashOfConfig":"29"},{"size":816,"mtime":1612514617458,"results":"54","hashOfConfig":"29"},{"size":89,"mtime":1612504854959,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"10p3a11",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\index.js",[],["117","118"],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\App.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\reducers\\index.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\reducers\\isPlayingReducer.js",["119"],"import { GAME_START, GAME_OVER } from '../actions/types';\r\n\r\nexport default (state = false, action) => {\r\n  switch (action.type) {\r\n    case GAME_START:\r\n      return true;\r\n    case GAME_OVER:\r\n      return false;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\actions\\index.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\actions\\types.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\index.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\index.js",["120"],"import State from './State';\r\nimport View from './View';\r\nimport Controller from './Controller';\r\nimport { MS_PER_CELL } from './config';\r\n\r\nlet controller = new Controller();\r\n\r\nfunction runAnimation(frameFunc) {\r\n  let lastTime = null;\r\n  let updateState = true;\r\n  function frame(time) {\r\n    if (lastTime) {\r\n      let frameTime = time - lastTime;\r\n      updateState = frameTime > MS_PER_CELL;\r\n\r\n      if (frameFunc(frameTime, updateState) === false) return;\r\n    }\r\n\r\n    if (updateState) lastTime = time;\r\n    requestAnimationFrame(frame);\r\n  }\r\n  requestAnimationFrame(frame);\r\n}\r\n\r\nfunction runGame() {\r\n  let display = new View();\r\n  let state = State.start();\r\n\r\n  controller.register(direction => {\r\n    state = state.scheduleNextTurn(direction);\r\n  });\r\n\r\n  return new Promise(resolve => {\r\n    runAnimation((time, update) => {\r\n      if (update) state = state.update();\r\n\r\n      display.syncState(state, time);\r\n\r\n      if (state.gameOver()) {\r\n        display.clearDisplay();\r\n        resolve(state.snake.length);\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  });\r\n}\r\n\r\nexport default { runGame };\r\n","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\State.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\View.js",["121"],"import { FOOD_COLOR, TAIL_COLOR, BACKGROUND_COLOR } from './Colors';\r\nimport { LEVEL_WIDTH, LEVEL_HEIGHT, MS_PER_CELL, RESOLUTION } from './config';\r\nimport { UP, DOWN, LEFT, RIGHT } from './Directions';\r\n\r\n// The game display.\r\nexport default class View {\r\n  constructor() {\r\n    this.canvas = document.getElementById('display');\r\n\r\n    // Increase resolution\r\n    this.canvas.style.width = `${this.canvas.width}px`;\r\n    this.canvas.style.height = `${this.canvas.height}px`;\r\n    this.canvas.width *= RESOLUTION;\r\n    this.canvas.height *= RESOLUTION;\r\n\r\n    this.cx = this.canvas.getContext('2d');\r\n\r\n    // Divide canvas into cells\r\n    this.cellWidth = this.canvas.width / LEVEL_WIDTH;\r\n    this.cellHeight = this.canvas.height / LEVEL_HEIGHT;\r\n  }\r\n\r\n  // Determine location on the canvas for each tail segment.\r\n  static currentLocation(x, y, direction, time) {\r\n    let frac = 1 - (time % MS_PER_CELL) / MS_PER_CELL;\r\n\r\n    switch (direction) {\r\n      case UP:\r\n        y += frac;\r\n        break;\r\n      case DOWN:\r\n        y -= frac;\r\n        break;\r\n      case LEFT:\r\n        x += frac;\r\n        break;\r\n      case RIGHT:\r\n        x -= frac;\r\n        break;\r\n    }\r\n\r\n    return { x, y };\r\n  }\r\n}\r\n\r\n// Update the display according to the current state and time.\r\nView.prototype.syncState = function (state, time) {\r\n  this.clearDisplay();\r\n  this.drawSnake(state.snake, time);\r\n  this.drawFood(state.food);\r\n};\r\n\r\n// Clear the display.\r\nView.prototype.clearDisplay = function () {\r\n  this.cx.fillStyle = BACKGROUND_COLOR;\r\n  this.cx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n};\r\n\r\n// Draw the Snake to the screen.\r\nView.prototype.drawSnake = function (snake, time) {\r\n  snake.tail.forEach(({ x, y, direction }) => {\r\n    const location = View.currentLocation(x, y, direction, time);\r\n    this.drawCell(location.x, location.y, TAIL_COLOR);\r\n  });\r\n};\r\n\r\n// Draw the food to the screen.\r\nView.prototype.drawFood = function (food) {\r\n  this.drawCell(food.x, food.y, FOOD_COLOR);\r\n};\r\n\r\nView.prototype.drawCell = function (x, y, color) {\r\n  const xCenter = (x + 0.5) * this.cellWidth;\r\n  const yCenter = (y + 0.5) * this.cellHeight;\r\n\r\n  this.cx.fillStyle = color;\r\n  this.cx.beginPath();\r\n  this.cx.moveTo(xCenter, yCenter);\r\n  this.cx.ellipse(\r\n    xCenter,\r\n    yCenter,\r\n    this.cellWidth * 0.3,\r\n    this.cellHeight * 0.3,\r\n    0,\r\n    0,\r\n    2 * Math.PI\r\n  );\r\n  this.cx.fill();\r\n};\r\n","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\Controller.js",["122"],"import { UP, DOWN, LEFT, RIGHT } from './Directions';\r\n\r\nexport default class Controller {\r\n  constructor(state) {\r\n    this.state = state;\r\n    this.listeners = [];\r\n    this.trackKeys({\r\n      ArrowUp: UP,\r\n      ArrowDown: DOWN,\r\n      ArrowLeft: LEFT,\r\n      ArrowRight: RIGHT,\r\n    });\r\n  }\r\n\r\n  trackKeys(keys) {\r\n    Object.entries(keys).forEach(([key, direction]) => {\r\n      window.addEventListener('keydown', event => {\r\n        if (key == event.key) {\r\n          this.listeners.forEach(listener => listener(direction));\r\n          event.preventDefault();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  register(listener) {\r\n    this.listeners.push(listener);\r\n  }\r\n}\r\n","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\config.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\Snake.js",["123","124","125","126","127","128","129","130","131"],"import { UP, DOWN, LEFT, RIGHT } from './Directions';\r\n\r\n// Models a two-dimensional snake in the classic 1970's arcade game.\r\nexport default class Snake {\r\n  constructor(tail) {\r\n    this.tail = tail;\r\n  }\r\n\r\n  // A Snake with the specified head can eat the item at the given position\r\n  static canEat(head, item) {\r\n    return head.x == item.x && head.y == item.y;\r\n  }\r\n\r\n  // The head of this Snake.\r\n  get head() {\r\n    return this.tail[0];\r\n  }\r\n\r\n  get length() {\r\n    return this.tail.length;\r\n  }\r\n\r\n  // The current direction for this Snake.\r\n  get direction() {\r\n    return this.head.direction;\r\n  }\r\n\r\n  // The head and one other segment of the tail occupy the same position.\r\n  get isEatingSelf() {\r\n    return this.tail\r\n      .slice(1, this.tail.length)\r\n      .some(segment => Snake.canEat(this.head, segment));\r\n  }\r\n\r\n  // This Snake can move in the specified direction.\r\n  canMove(direction) {\r\n    return this.isAPerpendicularTurn(direction) || this.length == 1;\r\n  }\r\n\r\n  // The specified direction is perpendicular to the current direction\r\n  // for this Snake.\r\n  isAPerpendicularTurn(direction) {\r\n    return (\r\n      (direction == LEFT || direction == RIGHT) ==\r\n      (this.direction == UP || this.direction == DOWN)\r\n    );\r\n  }\r\n\r\n  // Update this Snake according to the specified direction.\r\n  update(direction, food) {\r\n    return new Snake(this.updateTail(direction, food));\r\n  }\r\n\r\n  // Update the tail for this snake.\r\n  updateTail(direction, food) {\r\n    const newHead = this.updateHead(direction);\r\n\r\n    if (!Snake.canEat(newHead, food)) this.tail.pop();\r\n\r\n    return [newHead, ...this.tail];\r\n  }\r\n\r\n  // Position the head of this Snake according to the specified direction.\r\n  updateHead(direction) {\r\n    let { x, y } = this.head;\r\n    switch (direction) {\r\n      case UP:\r\n        y--;\r\n        break;\r\n      case DOWN:\r\n        y++;\r\n        break;\r\n      case LEFT:\r\n        x--;\r\n        break;\r\n      case RIGHT:\r\n        x++;\r\n        break;\r\n    }\r\n    return { x, y, direction };\r\n  }\r\n}\r\n","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\Directions.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\Colors.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\games\\snake\\utils.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\Navigation.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\GameConsole\\GameConsole.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\GameConsole\\GameConsoleNav.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\reducers\\authReducer.js",["132"],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\GameConsole\\GameConsoleDisplay.js",["133"],"import React, { Component } from 'react';\r\nimport GameConsolePlayer from './GameConsolePlayer';\r\nimport GameConsoleLeaderBoard from './GameConsoleLeaderBoard';\r\nimport { RUN_GAME, LEADER_BOARD } from './Modes';\r\n\r\nclass GameConsoleDisplay extends Component {\r\n  renderContent = () => {\r\n    switch (this.props.mode) {\r\n      case RUN_GAME:\r\n        return <GameConsolePlayer onGameOver={this.props.onGameOver} />;\r\n      case LEADER_BOARD:\r\n        return <GameConsoleLeaderBoard />;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return <div className=\"game-console__display\">{this.renderContent()}</div>;\r\n  }\r\n}\r\n\r\nexport default GameConsoleDisplay;\r\n","C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\GameConsole\\GameConsoleLeaderBoard.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\GameConsole\\Modes.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\GameConsole\\GameConsolePlayer.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\Profile.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\components\\Modal.js",[],"C:\\Users\\adam-carter\\Projects\\arcade-games\\client\\src\\history.js",[],{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":3,"column":1,"nodeType":"140","endLine":12,"endColumn":3},{"ruleId":"138","severity":1,"message":"141","line":50,"column":1,"nodeType":"140","endLine":50,"endColumn":28},{"ruleId":"142","severity":1,"message":"143","line":27,"column":5,"nodeType":"144","messageId":"145","endLine":40,"endColumn":6},{"ruleId":"146","severity":1,"message":"147","line":18,"column":17,"nodeType":"148","messageId":"149","endLine":18,"endColumn":19},{"ruleId":"146","severity":1,"message":"147","line":11,"column":19,"nodeType":"148","messageId":"149","endLine":11,"endColumn":21},{"ruleId":"146","severity":1,"message":"147","line":11,"column":39,"nodeType":"148","messageId":"149","endLine":11,"endColumn":41},{"ruleId":"146","severity":1,"message":"147","line":37,"column":64,"nodeType":"148","messageId":"149","endLine":37,"endColumn":66},{"ruleId":"146","severity":1,"message":"147","line":44,"column":18,"nodeType":"148","messageId":"149","endLine":44,"endColumn":20},{"ruleId":"146","severity":1,"message":"147","line":44,"column":39,"nodeType":"148","messageId":"149","endLine":44,"endColumn":41},{"ruleId":"146","severity":1,"message":"147","line":44,"column":49,"nodeType":"148","messageId":"149","endLine":44,"endColumn":51},{"ruleId":"146","severity":1,"message":"147","line":45,"column":23,"nodeType":"148","messageId":"149","endLine":45,"endColumn":25},{"ruleId":"146","severity":1,"message":"147","line":45,"column":47,"nodeType":"148","messageId":"149","endLine":45,"endColumn":49},{"ruleId":"142","severity":1,"message":"143","line":66,"column":5,"nodeType":"144","messageId":"145","endLine":79,"endColumn":6},{"ruleId":"138","severity":1,"message":"139","line":3,"column":1,"nodeType":"140","endLine":10,"endColumn":3},{"ruleId":"142","severity":1,"message":"143","line":8,"column":5,"nodeType":"144","messageId":"145","endLine":13,"endColumn":6},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]